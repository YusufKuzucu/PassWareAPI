// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PASSWareDbContext))]
    partial class PASSWareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("Entities.Concrete.Jump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JumpServerIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JumpServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JumpServerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Jumps");
                });

            modelBuilder.Entity("Entities.Concrete.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConnectionInfo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Entities.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectServerIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectServerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Entities.Concrete.Sql", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SqlServerIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlServerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sqls");
                });

            modelBuilder.Entity("Entities.Concrete.UI", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UIServerIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UIServerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UIServerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("UIs");
                });

            modelBuilder.Entity("Entities.Concrete.Vpn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("VpnConnectionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VpnPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VpnProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Vpns");
                });

            modelBuilder.Entity("Entities.Concrete.Communication", b =>
                {
                    b.HasOne("Entities.Concrete.Project", null)
                        .WithMany("Communications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Jump", b =>
                {
                    b.HasOne("Entities.Concrete.Project", null)
                        .WithMany("Jumps")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Link", b =>
                {
                    b.HasOne("Entities.Concrete.Project", null)
                        .WithMany("Links")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Sql", b =>
                {
                    b.HasOne("Entities.Concrete.Project", null)
                        .WithMany("Sqls")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.UI", b =>
                {
                    b.HasOne("Entities.Concrete.Project", null)
                        .WithMany("UIs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Vpn", b =>
                {
                    b.HasOne("Entities.Concrete.Project", null)
                        .WithMany("Vpns")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Project", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("Jumps");

                    b.Navigation("Links");

                    b.Navigation("Sqls");

                    b.Navigation("UIs");

                    b.Navigation("Vpns");
                });
#pragma warning restore 612, 618
        }
    }
}
